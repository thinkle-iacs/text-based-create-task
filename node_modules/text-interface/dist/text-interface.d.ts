export declare class TextInterface {
    private listener;
    outputAnimationLength: number;
    outputDelay: number;
    shouldStealFocus: boolean;
    private outputQueue;
    private div;
    private inputEl;
    private outputEl;
    private placeholderEl;
    private inputWrap;
    private outputting;
    private scrollOptions;
    constructor(element?: HTMLElement, title?: string);
    setTitle(text: string): void;
    clear(): void;
    setScrollOptions(options: ScrollIntoViewOptions): void;
    readChoice(choices: string[], prompt?: string, error?: string): Promise<string>;
    readYesOrNo(errorMessage?: string): Promise<boolean>;
    readNumber(errorMessage?: string): Promise<number>;
    readInteger(errorMessage?: string): Promise<number>;
    readIntegerInRange(min: number, max: number, errorMessage?: string): Promise<number>;
    readNumberInRange(min: number, max: number, errorMessage?: string): Promise<number>;
    readText(): Promise<string>;
    prompt(prompt: string): Promise<string>;
    promptYesOrNo(prompt: string): Promise<boolean>;
    promptNumber(prompt: string, errorMessage: string): Promise<number>;
    promptInteger(prompt: string, errorMessage: string): Promise<number>;
    promptNumberInRange(prompt: string, min: number, max: number, errorMessage: string): Promise<number>;
    promptIntegerInRange(prompt: string, min: number, max: number, errorMessage: string): Promise<number>;
    showElement(element: HTMLElement): void;
    showHTML(arbitraryHTML: string): void;
    showImage(src: string, alt?: string): void;
    output(text: string, echo?: boolean): void;
    private doNextOutput;
    private setupInputListener;
}

export { }
